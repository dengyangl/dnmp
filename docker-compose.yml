version: '3'

services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    hostname: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./mysql:/var/lib/mysql
      - ./my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      - MYSQL_ROOT_PASSWORD=mypassword

  redis:
    image: redis:4
    container_name: redis
    hostname: redis
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass mypassword
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"

  php:
    build: ./php-fpm
    container_name: php
    hostname: php
    ports:
      - "9000:9000"
      # easyswoole 端口
      #- "9501:9501"

      # websocket 端口(websocket的端口不能配置在nginx中)
      #- "8812:8812"
    links:
      - mysql:mysql
      - redis:redis
    volumes:
      - /volumes/data/source:/volumes/data/source
      - ./php-fpm/php.ini:/usr/local/etc/php/php.ini:ro
      - ./php-fpm/cron/laravel:/var/spool/cron/crontabs/laravel
      - ./php-fpm/supervisor/program.conf:/etc/supervisor/conf.d/program.conf
    command: supervisord -c /etc/supervisor/supervisord.conf
    working_dir: /volumes/data/source

  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    ports:
      - "80:80"
    volumes:
      - /volumes/data/source:/volumes/data/source
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
    links:
      - php:PHP-FPM


#  phpMyAdmin:
#    image: phpmyadmin/phpmyadmin:latest
#    container_name: phpmyadmin
#    ports:
#      # 用8081端口，避免与apache端口冲突
#      - "8081:80"
#    links:
#      - mysql:mysql
#    volumes:
#      - /sessions
#      - ./phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php
#    environment:
#      - PMA_HOST=mysql

#  node:
#    image: node:latest
#    container_name: node
#    hostname: node
#    ports:
#    - "7001:7001"
#    working_dir: /volumes/data/source
#    links:
#    - redis:redis
#    volumes:
#    - /volumes/data/source:/volumes/data/source
#    # >在字符串中折叠换行，| 保留换行符，这两个符号是YAML中字符串经常使用的符号
#    #  command:
#    #     - /bin/sh
#    #     - -c
#    #     - |
#    #     yarn install
#    #     pm2-runtime start ecosystem.config.js
#    command: ["/bin/sh", "-c", "yarn install && yarn dev"]

#  sonarqube:
#    image: sonarqube:7.7-community
#    #image: sonarqube:latest
#    container_name: sonarqube
#    ports:
#      - "8001:9000"
#      #- "8001:8001"
#    #networks:
#    #  - default
#    #environment:
#    #  - SONARQUBE_JDBC_URL=jdbc:mysql://mysql:3306/sonar
#    environment:
#      sonar.jdbc.username: root   #root管理员用户密码
#      sonar.jdbc.password: root   #创建test用户
#      sonar.jdbc.url: "jdbc:mysql://mysql:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false"
#      #sonar.jdbc.url: "jdbc:mysql://mysql:3306/sonar?useUnicode=true"
#    volumes:
#      - ./sonar/conf:/opt/sonarqube/conf
#      - ./sonar/data:/opt/sonarqube/data
#      - ./sonar/logs:/opt/sonarqube/logs
#      - ./sonar/extensions:/opt/sonarqube/extensions
#      - ./sonar/plugins:/opt/sonarqube/lib/bundled-plugins
#      #- ./sonar/logs/es.log:/opt/sonarqube/logs/es.log
#      #- ./sonar/conf/sonar.properties:/opt/sonarqube/conf/sonar.properties
#    depends_on:
#      - mysql
#    links:
#      - mysql



#  postgres1:
#    image: postgres:latest
#    container_name: sentry-postgres
#    restart: always
#    environment:
#      - POSTGRES_USER=sentry
#      - POSTGRES_PASSWORD=sentry
#      - POSTGRES_DBNAME=sentry
#      - POSTGRES_DBUSER=sentry
#      - POSTGRES_DBPASS=sentry
#    volumes:
#      - ./postgresql/postgresdb:/var/lib/postgresql/data

#  sentry1:
#    image: sentry:latest
#    links:
#      - redis
#      - postgres1
#    ports:
#      - 8003:9000
#    environment:
#      SENTRY_SECRET_KEY: '4^fcsj&_#i3wgq53k%7sc94wg@tms^5%6^5o@=0zc+00#y!ax2'
#      SENTRY_POSTGRES_HOST: postgres1
#      SENTRY_DB_USER: sentry
#      SENTRY_DB_PASSWORD: sentry
#      SENTRY_REDIS_HOST: redis

#  cron:
#    image: sentry:latest
#    links:
#      - redis
#      - postgres1
#    command: "sentry run cron"
#    environment:
#      SENTRY_SECRET_KEY: '4^fcsj&_#i3wgq53k%7sc94wg@tms^5%6^5o@=0zc+00#y!ax2'
#      SENTRY_POSTGRES_HOST: postgres1
#      SENTRY_DB_USER: sentry
#      SENTRY_DB_PASSWORD: sentry
#      SENTRY_REDIS_HOST: redis

#  worker:
#    image: sentry:latest
#    links:
#      - redis
#      - postgres1
#    command: "sentry run worker"
#    environment:
#      SENTRY_SECRET_KEY: '4^fcsj&_#i3wgq53k%7sc94wg@tms^5%6^5o@=0zc+00#y!ax2'
#      SENTRY_POSTGRES_HOST: postgres1
#      SENTRY_DB_USER: sentry
#      SENTRY_DB_PASSWORD: sentry
#      SENTRY_REDIS_HOST: redis